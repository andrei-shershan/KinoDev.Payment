trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'
  projectPath: 'src/KinoDev.Payment.WebApi/KinoDev.Payment.WebApi.csproj'
  webAppName: '$(AZURE_WEBAPP_NAME)'

stages:
  - stage: Build_and_Test
    displayName: 'Build and Test'
    jobs:
      - job: Build_and_Test_Job
        displayName: 'Build and Test'
        steps:
        - task: UseDotNet@2
          displayName: 'Install .NET SDK'
          inputs:
            packageType: 'sdk'
            version: '8.x'

        - task: NuGetToolInstaller@1
          displayName: 'Install NuGet'

        - task: PowerShell@2
          displayName: 'Replace tokens in nuget.azure.config'
          env:
            GITHUB_USER_NAME: $(GITHUB_USER_NAME)
            GITHUB_READ_PACKAGE_TOKEN: $(GITHUB_READ_PACKAGE_TOKEN)
          inputs:
            targetType: 'inline'
            script: |
              (Get-Content -Path configs/nuget.azure.config) `
                -replace '\$env:GITHUB_USER_NAME', $env:GITHUB_USER_NAME `
                -replace '\$env:GITHUB_READ_PACKAGE_TOKEN', $env:GITHUB_READ_PACKAGE_TOKEN | `
                Set-Content -Path configs/nuget.azure.config

        - task: DotNetCoreCLI@2
          displayName: 'Restore NuGet Packages'
          inputs:
            command: 'restore'
            projects: '**/*.sln'
            feedsToUse: 'config'
            nugetConfigPath: 'configs/nuget.azure.config'

        - task: DotNetCoreCLI@2
          displayName: 'Build Solution'
          inputs:
            command: 'build'
            projects: '**/*.sln'
            arguments: '--configuration $(buildConfiguration) --no-restore'

        - task: DotNetCoreCLI@2
          displayName: 'Run Unit Tests'
          inputs:
            command: 'test'
            projects: '**/*UnitTests/*.csproj'
            arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

        - task: PublishCodeCoverageResults@1
          displayName: 'Publish Code Coverage Results'
          inputs:
            codeCoverageTool: 'Cobertura'
            summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'

        - task: DotNetCoreCLI@2
          displayName: 'Publish Web API Project'
          inputs:
            command: 'publish'
            publishWebProjects: false
            projects: '$(projectPath)'
            arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/app'
            zipAfterPublish: true
            modifyOutputPath: false

        - task: PublishBuildArtifacts@1
          displayName: 'Publish build artifacts'
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)/app'
            ArtifactName: 'app'
            publishLocation: 'Container'

  - stage: Deploy
    displayName: 'Deploy to Azure'
    dependsOn: Build_and_Test
    condition: succeeded('Build_and_Test')
    jobs:
    - deployment: DeployToAzure
      displayName: 'Deploy to Azure WebApp'
      environment: kinodev-live
      strategy:
        runOnce:
          deploy:
            steps:
            - task: DownloadBuildArtifacts@1
              displayName: 'Download build artifacts'
              inputs:
                buildType: 'current'
                downloadType: 'single'
                artifactName: 'app'
                downloadPath: '$(System.ArtifactsDirectory)'
                
            - task: AzureWebApp@1
              displayName: 'Deploy to Azure Web App'
              inputs:
                azureSubscription: '$(AZURE_SERVICE_CONNECTION)'
                appType: 'webApp'
                appName: '$(webAppName)'
                package: '$(System.ArtifactsDirectory)/app/*.zip'
                deploymentMethod: 'auto'
